name@0:seed
pythonbasics

name@0:basicOperation
basicOperation

name@1:add
C:\Users\mithu\Desktop\project python\jupyter\pythonPractice\iter_gen.ipynb

name@3:+=
list+=list , tuple+=tuple , list+=tuple
tuple+=list WONT WORK
if __iadd__ present inplace upgrade,else use __add__ and do reassignment
can only access immediate local variable
a=[11,22,33]
a+=(1,2,3,4)
a
[11, 22, 33, 1, 2, 3, 4]
---
a=[11,22,33]
a+=([1,2,3,4]) <--- not the list
a
[11, 22, 33, 1, 2, 3, 4]
---
[1,2]+(4, ) single element tuple needs comma at end

name@4:extends
a property of list,argument is any iterable(can be tuple)
same as += except it  always tries inplace change does not fallback to reassignment
can access local and global variable
faster that for loop

a=[11,22,33]
a.extend([99,100])
a
[11, 22, 33, 99, 100]

name@6:plus +
not in place,a property of list , argument must be a list 

[1]+[1,2]=[1,1,2]
[1,2]+[454]

name@7:addItem
append 
a=[11,22,33]
a.append(99)
a
[11, 22, 33, 99]
----
a=[11,22,33]
a.append([1,2])
a
[11, 22, 33, [1, 2]]
---
a.insert(2,[2,3])
a
[11, 22, [2, 3], 33]

name@2:remove
content

name@1:removeByValue
content

name@1:removeAllOccurence
a=[22,11,22,33,22]
a=[i for i in a if i!=22 ]
a
[11, 33]
---
[e for e in item_list if e not in ('item', 5)]

name@2:removeFirstOccurence
a=[22,11,22,33,22]
a.remove(22) #removes first item
[11, 22, 33, 22]

name@2:removeByPosition
content

name@1:removeOne
a=[1,2,3]
del(a[1])
a
[1, 3]

a=[1,2,3]
a.pop(1)
2 #returns 2
a
[1, 3]

name@2:removeRange
a=[10,11,12,13,14]
del(a[1:3])
a
[10, 13, 14]

name@3:removeLastPos
a=[11,22,33]
a.pop()
33 #returns 3
a
[11,22]

name@3:sort
content

name@5:sortAndSorted
list.sort() - inplace,only list,faster,returns None
sorted() - not inplace,any iterable,returns sorted object,incase of dict returns sorted keys

name@4:file
content

name@1:writeToFile
content

name@1:newline
write to file with new line
  - option-1 f.write('hello'+'\n')
  - option 2 - print('text',file=f) NOTE:This will not print to stdout and f is file handle

name@1:itersAndgenrs
iterators dont bring all to memory, just iterates unlike list comprehensions which brings everything to memory,calculates and produces results 
C:\Users\mithu\Desktop\project python\jupyter\pythonPractice\iter_gen.ipynb

name@1:iterator
iterator(giant wheel,shop back) is
any object whose class has a  __iter__ method and __next__
which returns self 
even for loop internally calls iterable which calls iterator like java

name@2:generator
Every generator is an iterator, but not vice versa. 
issubclass(types.GeneratorType, collections.Iterator)
True

A generator  function has one or more yield expressions
def gensquares(N):
    for i in range(N):
        yield i ** 2

x = gensquares(4) #x is a generator object
x.__next__() or next(x)
generators are their own iterators and dont need __iter__ call before calling next

generator expression is a shorter form of generator function
(i*i for i in range(a, b)) 
(c * 4 for c in 'SPAM')

generators are one time use 

jonah jobs(next)
bowl(rice)
---------
generator

name@3:listcomprehension
will bring all to memory
[str(n) for n in range(10**100)]
will crash

a=[ i*i for i in a ]
square numbers of even
a=[ i*i for i in a if i%2==0 ]
square numbers if even else dont
 a=[ i*i if i%2==0 else i for i in a ]

name@4:map
map maps a function over an iterable
map is lazy, iterates
a=map(str, range(10**100));next(a) <--- WONT CRASH
speed comparison - LIST COMPREHENSION > MAP > FOR LOOP
*depends on pattern and usage
map and list comprehensions run at C language speed
for loop runs as bytecode within the PVM

--get ascii
list(map(ord,'abc'))
[97, 98, 99]
--int to str
list(map(str,[1,2,3]))
['1', '2', '3']
--neg to pos
list(map(abs, (-1, 0, 1)))

name@2:connector
content

name@1:module
---
 a .py file

name@1:__name__
if __name__ == "__main__":
    main() #always use this pattern else code will run on import

name@2:docstrings
class, function, or method header
first line following the colon
indented the same as the following code.
' " '''
PEP8 line length 80 characters

def move(self, x, y):
    "Move the point to a new location in 2D space."

name@3:package
content
 __init__.py makes a directory a package
 keep __init__.py empty

name@1:SampleStructure
parent_directory/
  main.py
  ecommerce/
    __init__.py
    database.py
    products.py
    payments/
        __init__.py
        square.py
        stripe.py

name@2:absoluteImport
import ecommerce.products
product = ecommerce.products.Product()

from ecommerce.products import Product
product = Product()

from ecommerce import products
product = products.Product()
import will work from any module

name@3:relativeImport
products.py - from .database import Database

package folder - from ..database import Database

from ..contact.email import send_mail

name@3:class
class Point:
    def __init__(self, x=0, y=0):
        self.move(x, y)
    def move(self, x, y):
        self.x = x
        self.y = y
    def reset(self):
        self.move(0, 0)

point = Point(3, 5)
print(point.x, point.y)
 MyFirstClass
 __init__ is initializer
 __new__ is constructor rarely used
class can be inside object, philiposc2p45

name@1:dataclass
(a small tuition) C:\Users\mithu\Desktop\project python\jupyter\pythonPractice\dataclass.ipynb

name@2:property
setter,deleter,getter variable access will go via property method
variable name and property name should not be same
eg use _name as variable and name as property

name@3:method
content
 self is object method

name@4:variables
content

name@1:global
database = None

def initialize_database():
    global database # dont need definition for use , only during assignment
    database = Database()

name@2:private
_ or __
_ can be directly accessed
__ can be directly accessed only from with in class
  outside class print(<object name>._<class name>__<var name>)

class SecretString:
    '''A not-at-all secure way to store a secret string.'''
    def __init__(self, plain_string, pass_phrase):
        self.__plain_string = plain_string
        self.__pass_phrase = pass_phrase
    def decrypt(self, pass_phrase):
        '''Only show the string if the pass_phrase is correct.'''
        if pass_phrase == self.__pass_phrase:
            return self.__plain_string   #<----------- self.__
        else:
            return ''
no REAL privacy

name@rootNode
root Node

